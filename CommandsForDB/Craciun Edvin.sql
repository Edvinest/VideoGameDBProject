DROP TABLE UserOwnedGames cascade constraints;
DROP TABLE WishList cascade constraints;
DROP TABLE Friends cascade constraints;
DROP TABLE Soundtrack cascade constraints;
DROP TABLE Reviews cascade constraints;
DROP TABLE Games cascade constraints;
DROP TABLE Genre cascade constraints;
DROP TABLE Developer cascade constraints;
DROP TABLE Employee cascade constraints;
DROP TABLE Publisher cascade constraints;
DROP TABLE PUser cascade constraints;

CREATE TABLE PUser (
    userID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    userNickname VARCHAR2(25) UNIQUE,
    userAccountCreated DATE
);

CREATE TABLE Genre (
    genID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genName VARCHAR2(10) UNIQUE
);

CREATE TABLE Developer (
    dID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    dName VARCHAR2(25) UNIQUE,
    dFoundingDate TIMESTAMP
);

CREATE TABLE Publisher (
    pID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    pName VARCHAR2(25) UNIQUE,
    pDevelopers CLOB CHECK (pDevelopers IS JSON)
);

CREATE TABLE Games (
    gID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    gName VARCHAR2(100),
    gGenre INTEGER,
    gDeveloper INTEGER,
    gPublisher INTEGER,
    gReleaseDate DATE,
    gHoursToComplete INTEGER,
    gRetailPrice INTEGER CHECK (gRetailPrice >= 0),
    gCurrentPlayerCount INTEGER DEFAULT 0 CHECK (gCurrentPlayerCount >= 0),
    gMaxPlayerCount INTEGER DEFAULT 0,
    FOREIGN KEY (gGenre) REFERENCES Genre(genID),
    FOREIGN KEY (gDeveloper) REFERENCES Developer(dID),
    FOREIGN KEY (gPublisher) REFERENCES Publisher(pID),
    
    CHECK (gMaxPlayerCount >= gCurrentPlayerCount AND gMaxPlayerCount >= 0)

);

CREATE TABLE UserOwnedGames (
    userID INTEGER,
    gameID INTEGER,
    hasCompleted NUMBER(1) DEFAULT 0 CHECK (hasCompleted IN (0, 1)),
    timePlayed INTERVAL DAY TO SECOND DEFAULT INTERVAL '0 00:00:00' DAY TO SECOND,
    FOREIGN KEY (userID) REFERENCES PUser(userID),
    FOREIGN KEY (gameID) REFERENCES Games(gID)
);

CREATE TABLE WishList (
    userID INTEGER,
    gameID INTEGER,
    wishlist_date TIMESTAMP,
    FOREIGN KEY (userID) REFERENCES PUser(userID),
    FOREIGN KEY (gameID) REFERENCES Games(gID)
);

CREATE TABLE Friends (
    userID INTEGER,
    friendID INTEGER,
    following_since DATE,
    FOREIGN KEY (userID) REFERENCES PUser(userID),
    FOREIGN KEY (friendID) REFERENCES PUser(userID)
);

CREATE TABLE Employee (
    eID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    eDevCompID INTEGER,
    eName VARCHAR2(50),
    eGender NUMBER(1) CHECK (eGender IN (0, 1)), -- 0 = Male, 1 = Female
    eBirthDate DATE,
    eHireDate DATE,
    eProfession VARCHAR2(50),
    eGameWorkedOn INTEGER,
    eDaysSpentOnProject INTEGER CHECK (eDaysSpentOnProject >= 0),
    FOREIGN KEY (eDevCompID) REFERENCES Developer(dID),
    FOREIGN KEY (eGameWorkedOn) REFERENCES Games(gID)
);

CREATE TABLE Soundtrack (
    gameID INTEGER,
    composer INTEGER,
    tracks CLOB CHECK (
        tracks IS JSON
        AND JSON_VALUE(tracks, '$.id' RETURNING NUMBER) IS NOT NULL
        AND JSON_VALUE(tracks, '$.title' RETURNING VARCHAR2(100)) IS NOT NULL
        AND JSON_VALUE(tracks, '$.length' RETURNING VARCHAR2(8)) LIKE '__:__'
    ),
    FOREIGN KEY (gameID) REFERENCES Games(gID),
    FOREIGN KEY (composer) REFERENCES Employee(eID)
);

CREATE TABLE Reviews (
    gameID INTEGER,
    reviewData CLOB CHECK (
        reviewData IS JSON
        AND JSON_VALUE(reviewData, '$.userID' RETURNING NUMBER) IS NOT NULL
        AND JSON_VALUE(reviewData, '$.rating' RETURNING NUMBER) BETWEEN 1 AND 10
        AND JSON_VALUE(reviewData, '$.comment' RETURNING VARCHAR2(500)) IS NOT NULL
    ),
    FOREIGN KEY (gameID) REFERENCES Games(gID)
);

--PUser table
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('GamerGal', TO_DATE('2021-03-15', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('PixelPioneer', TO_DATE('2020-06-11', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('RetroRex', TO_DATE('2019-08-23', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('8BitBard', TO_DATE('2022-01-01', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('ArcadeAce', TO_DATE('2021-05-17', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('LevelLord', TO_DATE('2020-12-30', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('XPXplorer', TO_DATE('2018-07-04', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('ConsoleCaptain', TO_DATE('2019-11-13', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('VirtualViking', TO_DATE('2020-02-22', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('QuestMaster', TO_DATE('2021-10-10', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('SpriteSeeker', TO_DATE('2020-04-29', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('DungeonDiva', TO_DATE('2019-09-15', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('ButtonBasher', TO_DATE('2022-02-10', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('ComboKing', TO_DATE('2021-08-05', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('PixelPaladin', TO_DATE('2019-12-12', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('CodeCrusader', TO_DATE('2020-03-03', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('HackHero', TO_DATE('2018-11-09', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('RPGWanderer', TO_DATE('2022-04-04', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('JoystickJedi', TO_DATE('2020-06-19', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('ArcadiaQueen', TO_DATE('2019-05-25', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('PowerUpPrince', TO_DATE('2021-07-07', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('AchievementHunter', TO_DATE('2020-09-14', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('ConsoleCowboy', TO_DATE('2018-01-20', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('SavePointSam', TO_DATE('2019-10-31', 'YYYY-MM-DD'));
INSERT INTO PUser (userNickname, userAccountCreated) VALUES ('RespawnRanger', TO_DATE('2020-05-18', 'YYYY-MM-DD'));

--Genre table
INSERT INTO Genre (genName) VALUES ('Action');
INSERT INTO Genre (genName) VALUES ('Adventure');
INSERT INTO Genre (genName) VALUES ('RPG');
INSERT INTO Genre (genName) VALUES ('Shooter');
INSERT INTO Genre (genName) VALUES ('Puzzle');
INSERT INTO Genre (genName) VALUES ('Strategy');
INSERT INTO Genre (genName) VALUES ('Sports');
INSERT INTO Genre (genName) VALUES ('Simulation');
INSERT INTO Genre (genName) VALUES ('Horror');
INSERT INTO Genre (genName) VALUES ('Platformer');
INSERT INTO Genre (genName) VALUES ('Racing');
INSERT INTO Genre (genName) VALUES ('Fighting');
INSERT INTO Genre (genName) VALUES ('Survival');
INSERT INTO Genre (genName) VALUES ('MMORPG');
INSERT INTO Genre (genName) VALUES ('Sandbox');

--Developer table
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Epic Games', TO_TIMESTAMP('1991-05-01', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Valve Corporation', TO_TIMESTAMP('1996-08-24', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Nintendo', TO_TIMESTAMP('1889-09-23', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Ubisoft', TO_TIMESTAMP('1986-03-28', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Rockstar Games', TO_TIMESTAMP('1998-12-01', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Bethesda Game Studios', TO_TIMESTAMP('2001-06-28', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Blizzard Entertainment', TO_TIMESTAMP('1991-02-08', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('CD Projekt Red', TO_TIMESTAMP('2002-05-01', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('FromSoftware', TO_TIMESTAMP('1986-11-01', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Square Enix', TO_TIMESTAMP('1986-04-01', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Capcom', TO_TIMESTAMP('1979-05-30', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Electronic Arts', TO_TIMESTAMP('1982-05-27', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Insomniac Games', TO_TIMESTAMP('1994-02-03', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Bungie', TO_TIMESTAMP('1991-05-01', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Naughty Dog', TO_TIMESTAMP('1984-09-27', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Mojang Studios', TO_TIMESTAMP('2009-05-17', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Supergiant Games', TO_TIMESTAMP('2009-09-01', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Team Cherry', TO_TIMESTAMP('2015-12-01', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Larian Studios', TO_TIMESTAMP('1996-04-01', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Hello Games', TO_TIMESTAMP('2008-08-01', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('ConcernedApe', TO_TIMESTAMP('2012-01-01', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Klei Entertainment', TO_TIMESTAMP('2005-07-01', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Facepunch Studios', TO_TIMESTAMP('2004-03-01', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Giant Squid', TO_TIMESTAMP('2015-03-01', 'YYYY-MM-DD'));
INSERT INTO Developer (dName, dFoundingDate) VALUES ('Toby Fox', TO_TIMESTAMP('2015-09-15', 'YYYY-MM-DD'));

--Publisher table
INSERT INTO Publisher (pName, pDevelopers) VALUES
('Stellar Games', '[{"devID": 1}, {"devID": 2}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('RedLeaf Studios', '[{"devID": 3}, {"devID": 4}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('Cosmic Interactive', '[{"devID": 5}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('BlueStar Publishing', '[{"devID": 6}, {"devID": 7}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('NovaForge Games', '[{"devID": 8}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('Pixel Planet', '[{"devID": 9}, {"devID": 10}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('IronWave Studios', '[{"devID": 11}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('Quantum Creations', '[{"devID": 12}, {"devID": 13}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('Apex Entertainment', '[{"devID": 14}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('Radiant Sun Games', '[{"devID": 15}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('Galaxy Bound', '[{"devID": 1}, {"devID": 15}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('Vertex Vision', '[{"devID": 2}, {"devID": 6}, {"devID": 11}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('Orbital Strike Studios', '[{"devID": 3}, {"devID": 7}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('Solar Flair Games', '[{"devID": 4}, {"devID": 10}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('Nebula Nexus', '[{"devID": 5}, {"devID": 13}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('Mojang Studios', '[{"devID": 41}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('Supergiant Games', '[{"devID": 42}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('Team Cherry', '[{"devID": 43}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('Larian Studios', '[{"devID": 44}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('Hello Games', '[{"devID": 45}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('ConcernedApe', '[{"devID": 46}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('Klei Entertainment', '[{"devID": 47}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('Facepunch Studios', '[{"devID": 48}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('Giant Squid', '[{"devID": 49}]');

INSERT INTO Publisher (pName, pDevelopers) VALUES
('Toby Fox', '[{"devID": 50}]');

--Insert data into Games
INSERT INTO Games (gName, gGenre, gDeveloper, gPublisher, gReleaseDate, gHoursToComplete, gRetailPrice, gCurrentPlayerCount, gMaxPlayerCount) VALUES
('Cosmic Crusaders', 1, 1, 1, TO_DATE('2023-01-15', 'YYYY-MM-DD'), 40, 60, 120, 200),
('Legend of the Void', 2, 2, 2, TO_DATE('2022-05-22', 'YYYY-MM-DD'), 50, 70, 85, 150),
('Pixel Planet Adventure', 3, 3, 2, TO_DATE('2023-10-03', 'YYYY-MM-DD'), 30, 50, 50, 120),
('CyberHunter', 4, 4, 3, TO_DATE('2024-04-12', 'YYYY-MM-DD'), 20, 40, 75, 100),
('NovaForge Saga', 5, 5, 4, TO_DATE('2021-11-25', 'YYYY-MM-DD'), 60, 80, 90, 250),
('Radiant Sunfall', 6, 6, 4, TO_DATE('2023-06-18', 'YYYY-MM-DD'), 25, 55, 60, 80),
('IronWave Tactics', 7, 7, 5, TO_DATE('2020-02-09', 'YYYY-MM-DD'), 35, 45, 30, 50),
('Quantum Realms', 8, 8, 6, TO_DATE('2019-12-01', 'YYYY-MM-DD'), 40, 70, 120, 200),
('Apex Legends Origins', 9, 9, 7, TO_DATE('2024-07-30', 'YYYY-MM-DD'), 30, 60, 150, 300),
('BlueStar Odyssey', 10, 10, 7, TO_DATE('2022-03-21', 'YYYY-MM-DD'), 55, 75, 100, 180),
('Stellar Space Siege', 1, 11, 8, TO_DATE('2023-09-14', 'YYYY-MM-DD'), 45, 65, 95, 150),
('RedLeaf Chronicles', 2, 12, 9, TO_DATE('2021-08-07', 'YYYY-MM-DD'), 25, 50, 70, 100),
('Pixel Brawl Arena', 3, 13, 9, TO_DATE('2024-01-18', 'YYYY-MM-DD'), 10, 30, 200, 400),
('Cosmic Carnage', 4, 14, 10, TO_DATE('2023-12-02', 'YYYY-MM-DD'), 35, 55, 65, 90),
('CyberRunner', 5, 15, 10, TO_DATE('2020-10-13', 'YYYY-MM-DD'), 20, 40, 50, 80),
('Legendary Battlegrounds', 6, 1, 1, TO_DATE('2023-11-22', 'YYYY-MM-DD'), 50, 70, 100, 200),
('Forge of Eternity', 7, 2, 2, TO_DATE('2022-07-19', 'YYYY-MM-DD'), 40, 60, 80, 150),
('Radiant Fall', 8, 3, 2, TO_DATE('2023-02-28', 'YYYY-MM-DD'), 30, 50, 60, 100),
('NovaLight Chronicles', 9, 4, 3, TO_DATE('2024-06-01', 'YYYY-MM-DD'), 35, 55, 70, 120),
('Pixel Wars', 10, 5, 4, TO_DATE('2021-09-15', 'YYYY-MM-DD'), 15, 35, 30, 60),
('IronWave Blitz', 1, 6, 4, TO_DATE('2023-04-09', 'YYYY-MM-DD'), 45, 65, 80, 140),
('Quantum Siege', 2, 7, 5, TO_DATE('2020-03-30', 'YYYY-MM-DD'), 25, 45, 55, 90),
('Apex Rising', 3, 8, 6, TO_DATE('2019-11-10', 'YYYY-MM-DD'), 50, 75, 130, 250),
('BlueStar Guardians', 4, 9, 7, TO_DATE('2024-08-16', 'YYYY-MM-DD'), 35, 55, 110, 180),
('Stellar Conflict', 5, 10, 7, TO_DATE('2022-12-05', 'YYYY-MM-DD'), 20, 40, 50, 80),
('RedLeaf Adventures', 6, 11, 8, TO_DATE('2023-05-08', 'YYYY-MM-DD'), 30, 50, 70, 110),
('Cosmic Heist', 7, 12, 9, TO_DATE('2021-04-03', 'YYYY-MM-DD'), 40, 70, 100, 150),
('CyberQuest', 8, 13, 9, TO_DATE('2024-02-19', 'YYYY-MM-DD'), 25, 45, 90, 120),
('Legend of Nova', 9, 14, 10, TO_DATE('2023-10-27', 'YYYY-MM-DD'), 50, 75, 120, 220);

--UserOwnedGames table
INSERT INTO UserOwnedGames (userID, gameID, hasCompleted, timePlayed) VALUES
(1, 1, 1, INTERVAL '40 10:20:00' DAY TO SECOND),
(2, 2, 0, INTERVAL '15 04:30:00' DAY TO SECOND),
(3, 3, 1, INTERVAL '60 20:15:00' DAY TO SECOND),
(4, 4, 0, INTERVAL '10 02:10:00' DAY TO SECOND),
(5, 5, 1, INTERVAL '50 15:00:00' DAY TO SECOND),
(6, 6, 1, INTERVAL '20 08:45:00' DAY TO SECOND),
(7, 7, 0, INTERVAL '5 01:30:00' DAY TO SECOND),
(8, 8, 1, INTERVAL '40 12:00:00' DAY TO SECOND),
(9, 9, 0, INTERVAL '25 05:20:00' DAY TO SECOND),
(10, 10, 1, INTERVAL '30 10:10:00' DAY TO SECOND),
(11, 11, 0, INTERVAL '12 04:00:00' DAY TO SECOND),
(12, 12, 1, INTERVAL '10 02:45:00' DAY TO SECOND),
(13, 13, 0, INTERVAL '20 06:30:00' DAY TO SECOND),
(14, 14, 1, INTERVAL '30 08:00:00' DAY TO SECOND),
(15, 15, 0, INTERVAL '18 03:15:00' DAY TO SECOND),
(16, 16, 1, INTERVAL '50 22:10:00' DAY TO SECOND),
(17, 17, 0, INTERVAL '35 09:40:00' DAY TO SECOND),
(18, 18, 1, INTERVAL '30 12:50:00' DAY TO SECOND),
(19, 19, 0, INTERVAL '28 07:30:00' DAY TO SECOND),
(20, 20, 1, INTERVAL '40 10:15:00' DAY TO SECOND),
(21, 21, 0, INTERVAL '10 03:10:00' DAY TO SECOND),
(22, 22, 1, INTERVAL '25 08:25:00' DAY TO SECOND),
(23, 23, 0, INTERVAL '18 05:00:00' DAY TO SECOND),
(24, 24, 1, INTERVAL '50 20:15:00' DAY TO SECOND),
(25, 25, 0, INTERVAL '30 12:00:00' DAY TO SECOND);

--Wishlist table
INSERT INTO WishList (userID, gameID, wishlist_date) VALUES (1, 3, TO_TIMESTAMP('01-FEB-24 10:15:00 AM', 'DD-MON-YY HH:MI:SS AM'));
INSERT INTO WishList (userID, gameID, wishlist_date) VALUES (1, 5, TO_TIMESTAMP('05-FEB-24 02:20:00 AM', 'DD-MON-YY HH:MI:SS AM'));
INSERT INTO WishList (userID, gameID, wishlist_date) VALUES (2, 4, TO_TIMESTAMP('10-FEB-24 09:45:00 AM', 'DD-MON-YY HH:MI:SS AM'));
INSERT INTO WishList (userID, gameID, wishlist_date) VALUES (2, 6, TO_TIMESTAMP('15-FEB-24 04:30:00 AM', 'DD-MON-YY HH:MI:SS AM'));
INSERT INTO WishList (userID, gameID, wishlist_date) VALUES (3, 7, TO_TIMESTAMP('01-MAR-24 01:50:00 AM', 'DD-MON-YY HH:MI:SS AM'));
INSERT INTO WishList (userID, gameID, wishlist_date) VALUES (3, 8, TO_TIMESTAMP('01-MAR-24 06:10:00 PM', 'DD-MON-YY HH:MI:SS PM'));
INSERT INTO WishList (userID, gameID, wishlist_date) VALUES (4, 9, TO_TIMESTAMP('05-MAR-24 10:30:00 AM', 'DD-MON-YY HH:MI:SS AM'));
INSERT INTO WishList (userID, gameID, wishlist_date) VALUES (4, 10, TO_TIMESTAMP('07-MAR-24 11:30:00 AM', 'DD-MON-YY HH:MI:SS AM'));
INSERT INTO WishList (userID, gameID, wishlist_date) VALUES (5, 14, TO_TIMESTAMP('15-MAR-24 10:40:00 AM', 'DD-MON-YY HH:MI:SS AM'));
INSERT INTO WishList (userID, gameID, wishlist_date) VALUES (5, 15, TO_TIMESTAMP('20-MAR-24 05:10:00 PM', 'DD-MON-YY HH:MI:SS PM'));
INSERT INTO WishList (userID, gameID, wishlist_date) VALUES (6, 17, TO_TIMESTAMP('25-MAR-24 03:05:00 AM', 'DD-MON-YY HH:MI:SS AM'));
INSERT INTO WishList (userID, gameID, wishlist_date) VALUES (7, 18, TO_TIMESTAMP('01-APR-24 09:20:00 AM', 'DD-MON-YY HH:MI:SS AM'));
INSERT INTO WishList (userID, gameID, wishlist_date) VALUES (7, 20, TO_TIMESTAMP('05-APR-24 12:00:00 PM', 'DD-MON-YY HH:MI:SS PM'));
INSERT INTO WishList (userID, gameID, wishlist_date) VALUES (8, 22, TO_TIMESTAMP('15-APR-24 11:50:00 AM', 'DD-MON-YY HH:MI:SS AM'));
INSERT INTO WishList (userID, gameID, wishlist_date) VALUES (9, 25, TO_TIMESTAMP('25-APR-24 10:10:00 AM', 'DD-MON-YY HH:MI:SS AM'));
INSERT INTO WishList (userID, gameID, wishlist_date) VALUES (10, 26, TO_TIMESTAMP('01-MAY-24 01:45:00 AM', 'DD-MON-YY HH:MI:SS AM'));
INSERT INTO WishList (userID, gameID, wishlist_date) VALUES (10, 28, TO_TIMESTAMP('05-MAY-24 06:30:00 PM', 'DD-MON-YY HH:MI:SS PM'));


--Friends table
INSERT INTO Friends (userID, friendID, following_since) VALUES
(1, 2, DATE '2021-03-20'),
(1, 3, DATE '2021-05-15'),
(1, 4, DATE '2021-06-10'),
(2, 1, DATE '2021-03-20'),
(2, 5, DATE '2021-07-22'),
(3, 1, DATE '2021-05-15'),
(3, 6, DATE '2021-08-30'),
(4, 1, DATE '2021-06-10'),
(4, 7, DATE '2021-09-12'),
(5, 2, DATE '2021-07-22'),
(5, 8, DATE '2021-10-05'),
(6, 3, DATE '2021-08-30'),
(6, 9, DATE '2021-11-01'),
(7, 4, DATE '2021-09-12'),
(7, 10, DATE '2021-12-18'),
(8, 5, DATE '2021-10-05'),
(8, 11, DATE '2022-01-15'),
(9, 6, DATE '2021-11-01'),
(9, 12, DATE '2022-02-20'),
(10, 7, DATE '2021-12-18'),
(10, 13, DATE '2022-03-05'),
(11, 8, DATE '2022-01-15'),
(11, 14, DATE '2022-04-10'),
(12, 9, DATE '2022-02-20'),
(12, 15, DATE '2022-05-25'),
(13, 10, DATE '2022-03-05'),
(13, 16, DATE '2022-06-15'),
(14, 11, DATE '2022-04-10'),
(14, 17, DATE '2022-07-01'),
(15, 12, DATE '2022-05-25'),
(15, 18, DATE '2022-08-20'),
(16, 13, DATE '2022-06-15'),
(16, 19, DATE '2022-09-10'),
(17, 14, DATE '2022-07-01'),
(17, 20, DATE '2022-10-05'),
(18, 15, DATE '2022-08-20'),
(19, 16, DATE '2022-09-10'),
(20, 17, DATE '2022-10-05');

--Employee table
INSERT INTO Employee (eDevCompID, eName, eGender, eBirthDate, eHireDate, eProfession, eGameWorkedOn, eDaysSpentOnProject) VALUES
(1, 'John Smith', 0, DATE '1985-04-15', DATE '2010-05-20', 'Software Engineer', 1, 1500),
(1, 'Jane Doe', 1, DATE '1990-07-12', DATE '2012-08-15', 'Game Designer', 2, 1200),
(1, 'Alex Brown', 0, DATE '1982-11-10', DATE '2008-01-05', 'Composer', 3, 1800),
(2, 'Emily Clark', 1, DATE '1988-09-23', DATE '2013-03-11', 'Animator', 4, 900),
(2, 'Michael White', 0, DATE '1981-03-17', DATE '2005-07-21', 'Software Engineer', 5, 2200),
(2, 'Laura Wilson', 1, DATE '1992-01-18', DATE '2016-09-09', 'Composer', 6, 700),
(3, 'Hiroshi Tanaka', 0, DATE '1975-06-05', DATE '2000-10-01', 'Game Designer', 7, 2500),
(3, 'Keiko Sato', 1, DATE '1983-12-14', DATE '2007-02-22', 'Software Engineer', 8, 1900),
(3, 'Takashi Ito', 0, DATE '1980-02-19', DATE '2005-06-17', 'Composer', 9, 2000),
(4, 'Pierre Dubois', 0, DATE '1986-08-30', DATE '2010-11-12', 'Level Designer', 10, 1500),
(4, 'Marie Dupont', 1, DATE '1991-05-05', DATE '2014-07-03', 'Animator', 11, 800),
(4, 'Jacques Rousseau', 0, DATE '1987-03-28', DATE '2012-04-15', 'Composer', 12, 1100),
(5, 'Robert Johnson', 0, DATE '1984-09-16', DATE '2008-06-29', 'Game Designer', 13, 1800),
(5, 'Sarah Lee', 1, DATE '1993-10-07', DATE '2017-08-25', 'Software Engineer', 14, 600),
(5, 'Tom Harris', 0, DATE '1985-12-19', DATE '2011-03-10', 'Composer', 15, 1300),
(6, 'Emily Davis', 1, DATE '1989-01-14', DATE '2013-09-01', 'Software Engineer', 16, 1000),
(6, 'James Miller', 0, DATE '1986-07-25', DATE '2012-05-15', 'Composer', 17, 1400),
(6, 'Charlotte Brown', 1, DATE '1992-02-20', DATE '2016-12-10', 'Game Tester', 18, 500),
(7, 'William Taylor', 0, DATE '1983-11-02', DATE '2009-08-20', 'Game Designer', 19, 1600),
(7, 'Sophia Martinez', 1, DATE '1990-06-09', DATE '2015-03-18', 'Animator', 20, 700),
(7, 'Liam Wilson', 0, DATE '1988-03-12', DATE '2011-07-14', 'Composer', 21, 1200),
(8, 'Oliver Moore', 0, DATE '1981-10-22', DATE '2007-06-01', 'Software Engineer', 22, 2000),
(8, 'Isabella Garcia', 1, DATE '1985-04-19', DATE '2010-11-30', 'Composer', 23, 1600),
(8, 'Ethan Martinez', 0, DATE '1991-09-06', DATE '2014-02-25', 'Level Designer', 24, 900),
(9, 'Ava Taylor', 1, DATE '1987-07-27', DATE '2012-01-14', 'Game Designer', 25, 1400),
(9, 'Mason Thomas', 0, DATE '1994-05-17', DATE '2018-04-22', 'Software Engineer', 26, 500),
(9, 'Sophia Scott', 1, DATE '1990-11-30', DATE '2013-08-20', 'Composer', 27, 900),
(10, 'Logan Martinez', 0, DATE '1979-03-15', DATE '2004-12-10', 'Software Engineer', 28, 2300),
(10, 'Mia Anderson', 1, DATE '1988-02-28', DATE '2012-03-04', 'Animator', 28, 1200),
(10, 'Lucas Lee', 0, DATE '1983-06-22', DATE '2009-05-12', 'Composer', 28, 1700);

--Soundtrack table
-- For gameID 1, composer 3
INSERT INTO Soundtrack (gameID, composer, tracks) VALUES
(1, 3, '{"id": 1, "title": "Epic Battle Theme", "length": "03:45"}');

INSERT INTO Soundtrack (gameID, composer, tracks) VALUES
(1, 3, '{"id": 2, "title": "Main Menu Music", "length": "02:30"}');

INSERT INTO Soundtrack (gameID, composer, tracks) VALUES
(1, 3, '{"id": 3, "title": "Victory Fanfare", "length": "01:15"}');

-- For gameID 2, composer 6
INSERT INTO Soundtrack (gameID, composer, tracks) VALUES
(2, 6, '{"id": 1, "title": "Intro Melody", "length": "02:50"}');

INSERT INTO Soundtrack (gameID, composer, tracks) VALUES
(2, 6, '{"id": 2, "title": "Exploration Theme", "length": "04:10"}');

INSERT INTO Soundtrack (gameID, composer, tracks) VALUES
(2, 6, '{"id": 3, "title": "Combat Loop", "length": "03:20"}');

-- For gameID 3, composer 9
INSERT INTO Soundtrack (gameID, composer, tracks) VALUES
(3, 9, '{"id": 1, "title": "Pixel Adventure", "length": "03:00"}');

INSERT INTO Soundtrack (gameID, composer, tracks) VALUES
(3, 9, '{"id": 2, "title": "Retro Overture", "length": "02:45"}');

INSERT INTO Soundtrack (gameID, composer, tracks) VALUES
(3, 9, '{"id": 3, "title": "Boss Fight", "length": "03:35"}');

INSERT INTO Soundtrack (gameID, composer, tracks) VALUES
(3, 9, '{"id": 4, "title": "Mystic Caverns", "length": "04:10"}');

INSERT INTO Soundtrack (gameID, composer, tracks) VALUES
(3, 9, '{"id": 5, "title": "Final Horizon", "length": "03:50"}');

INSERT INTO Soundtrack (gameID, composer, tracks) VALUES
(3, 9, '{"id": 6, "title": "Victory March", "length": "02:55"}');

-- Reviews for gameID 1
INSERT INTO Reviews (gameID, reviewData) VALUES
(1, '{"userID": 1, "rating": 8, "comment": "Amazing gameplay and graphics."}');
INSERT INTO Reviews (gameID, reviewData) VALUES
(1, '{"userID": 2, "rating": 9, "comment": "A must-play for RPG fans."}');
INSERT INTO Reviews (gameID, reviewData) VALUES
(1, '{"userID": 3, "rating": 7, "comment": "Great story but some bugs."}');

-- Reviews for gameID 2
INSERT INTO Reviews (gameID, reviewData) VALUES
(2, '{"userID": 4, "rating": 6, "comment": "Decent game but lacks originality."}');
INSERT INTO Reviews (gameID, reviewData) VALUES
(2, '{"userID": 5, "rating": 8, "comment": "Fun and engaging combat."}');
INSERT INTO Reviews (gameID, reviewData) VALUES
(2, '{"userID": 6, "rating": 7, "comment": "Good multiplayer experience."}');

-- Reviews for gameID 3
INSERT INTO Reviews (gameID, reviewData) VALUES
(3, '{"userID": 7, "rating": 9, "comment": "Loved the retro vibe!"}');
INSERT INTO Reviews (gameID, reviewData) VALUES
(3, '{"userID": 8, "rating": 10, "comment": "Perfect blend of nostalgia and innovation."}');
INSERT INTO Reviews (gameID, reviewData) VALUES
(3, '{"userID": 9, "rating": 8, "comment": "Challenging but rewarding gameplay."}');

-- Reviews for gameID 4
INSERT INTO Reviews (gameID, reviewData) VALUES
(4, '{"userID": 10, "rating": 5, "comment": "Too repetitive for my taste."}');
INSERT INTO Reviews (gameID, reviewData) VALUES
(4, '{"userID": 11, "rating": 6, "comment": "Interesting concept but poor execution."}');
INSERT INTO Reviews (gameID, reviewData) VALUES
(4, '{"userID": 12, "rating": 7, "comment": "Nice graphics but lacks depth."}');

-- Reviews for gameID 5
INSERT INTO Reviews (gameID, reviewData) VALUES
(5, '{"userID": 13, "rating": 9, "comment": "Epic journey with stunning visuals."}');
INSERT INTO Reviews (gameID, reviewData) VALUES
(5, '{"userID": 14, "rating": 8, "comment": "Great characters and story."}');
INSERT INTO Reviews (gameID, reviewData) VALUES
(5, '{"userID": 15, "rating": 7, "comment": "Enjoyable but too linear."}');

-- Reviews for gameID 6
INSERT INTO Reviews (gameID, reviewData) VALUES
(6, '{"userID": 16, "rating": 10, "comment": "Masterpiece in every aspect."}');
INSERT INTO Reviews (gameID, reviewData) VALUES
(6, '{"userID": 17, "rating": 9, "comment": "An unforgettable space adventure."}');
INSERT INTO Reviews (gameID, reviewData) VALUES
(6, '{"userID": 18, "rating": 8, "comment": "Immersive but a bit slow-paced."}');

-- Reviews for gameID 7
INSERT INTO Reviews (gameID, reviewData) VALUES
(7, '{"userID": 19, "rating": 6, "comment": "Fun at first but becomes tedious."}');
INSERT INTO Reviews (gameID, reviewData) VALUES
(7, '{"userID": 20, "rating": 7, "comment": "Solid strategy game with room for improvement."}');
INSERT INTO Reviews (gameID, reviewData) VALUES
(7, '{"userID": 21, "rating": 8, "comment": "Well-designed levels and mechanics."}');

-- Reviews for gameID 8
INSERT INTO Reviews (gameID, reviewData) VALUES
(8, '{"userID": 22, "rating": 10, "comment": "Mind-blowing visuals and story!"}');
INSERT INTO Reviews (gameID, reviewData) VALUES
(8, '{"userID": 23, "rating": 9, "comment": "Innovative gameplay with great replay value."}');
INSERT INTO Reviews (gameID, reviewData) VALUES
(8, '{"userID": 24, "rating": 8, "comment": "Highly polished but a bit short."}');

-- Reviews for gameID 9
INSERT INTO Reviews (gameID, reviewData) VALUES
(9, '{"userID": 25, "rating": 5, "comment": "Too many microtransactions."}');
INSERT INTO Reviews (gameID, reviewData) VALUES
(9, '{"userID": 26, "rating": 6, "comment": "Good concept but needs better balance."}');
INSERT INTO Reviews (gameID, reviewData) VALUES
(9, '{"userID": 27, "rating": 7, "comment": "Fun in short bursts."}');

-- Reviews for gameID 10
INSERT INTO Reviews (gameID, reviewData) VALUES
(10, '{"userID": 28, "rating": 8, "comment": "Great exploration and atmosphere."}');
INSERT INTO Reviews (gameID, reviewData) VALUES
(10, '{"userID": 29, "rating": 9, "comment": "Fantastic world-building and lore."}');
INSERT INTO Reviews (gameID, reviewData) VALUES
(10, '{"userID": 30, "rating": 10, "comment": "A true masterpiece of storytelling."}');

-- 1. feladat
-- Listázz ki minden olyan játékot ahol az értékelések átlaga minimum 5

select distinct g.gName from Games g
join Reviews r on g.gID = r.gameid
group by g.gName
having avg(JSON_VALUE(reviewData, '$.rating' returning number)) >= 5;

-- 2. feladat
-- Melyik két felhasználó vált barátokká legközelebb egy játék kiadási dátumával?

select p1.userNickname, p2.userNickname, g.gName, ABS(TRUNC(g.gReleaseDate - f.following_since)) as "Days since release and being friends" from Friends f
join PUser p1 on f.userID = p1.userID
join PUser p2 on f.friendID = p2.userID
join UserOwnedGames u1 on u1.userid = p1.userID
join UserOwnedGames u2 on u2.userid = p2.userID and u1.gameid = u2.gameid
join Games g on u1.gameid = g.gID
order by ABS(TRUNC(g.gReleaseDate - f.following_since)) asc
FETCH FIRST 1 ROWS ONLY;

-- 3. feladat
-- Átlagosan, mennyivel játszanak többet a felhasználók, mint a játéknál kiírt idő

select g.gName, g.gHoursToComplete, round(avg(extract(day from uog.timePlayed) * 24 +
extract(hour from uog.timePlayed) + extract(minute from uog.timePlayed) * 60 + extract(second from uog.timePlayed) * 3600), 2) as AvgTimePlayed
from Games g
join UserOwnedGames uog on g.gID = uog.gameID
group by g.gName, g.gHoursToComplete;

-- 4. feladat
-- A játékosok hány százaléka fejezte be a megvásárolt játékaikat?

with FinishedGame as (
select count(*) as Completed from UserOwnedGames where hasCompleted = 1),
AllOwnedGames as(
    select count(*) as Total from UserOwnedGames)

select round((fg.Completed * 100 / aog.Total), 2) as CompletedPercentage from FinishedGame fg
cross join AllOwnedGames aog;

-- 5. feladat
-- Ha csinálnánk egy lejátszási listát az adatbázisban található zenékből, mennyire lenne hosszú? (Formázd nap, óra, perc és másodperc szerint)

with TrackDurations as (
    select JSON_VALUE(tracks, '$.length') as length
    from Soundtrack),
ConvertedDuration as (
    select sum(extract(minute from to_dsinterval('0 00:' || length)) * 60 + extract(second from to_dsinterval('0 00:' || length))) as total_seconds
    from TrackDurations),
FormattedDuration as(
    select
        floor(total_seconds / 86400) as days,
        floor(mod(total_seconds, 86400) / 3600) as hours,
        floor(mod(total_seconds, 3600) / 60) as minutes,
        mod(total_seconds, 60) as seconds
    from ConvertedDuration)

select * from FormattedDuration;

-- 6. feladat
-- A játékfejlesztő cégek közül hány százalékuk adja ki a saját játékát?

with AllPublishers as(
    select count(*) as TotalPublishers from Publisher),
SelfPublishers as (
    select count(*) as SelfPublisherCount from Publisher p
    join Developer d on JSON_VALUE(p.pDevelopers, '$.devID') = d.dID and p.pName = d.dName)

select (sp.SelfPublisherCount * 100/ ap.TotalPublishers) as Percentage from SelfPublishers sp cross join AllPublishers ap;

-- 7. feladat
-- Listázz ki minden kiadót és a cégeiket

select p.pName,listagg(d.dName, ', ') within group (order by d.dName) as "Developer(s)"
from Publisher p
left join json_table(
       p.pDevelopers,
       '$[*]' columns (devID int path'$.devID')
) jt on 1 = 1
left join Developer d on jt.devID = d.dID
group by p.pName;

-- 8. feladat
-- Nemekre bontva, kik dolgoztak többet egy adott projekten?

select 'Men' as Gender, round(avg(eDaysSpentOnProject), 2) as DaysOnProject from Employee
where eGender = 0

union all

Select 'Women' as Gender, round(avg(eDaysSpentOnProject), 2) as DaysOnProject from Employee
where eGender = 1;

-- 9. feladat
-- Ha az 1-es játékos visszakapná a pénzét, mennyit kapna vissza?

select distinct u.userNickname, sum(g.gRetailPrice) as MoneySpent from PUser u
join UserOwnedGames uog on uog.userID = u.userID
join Games g on uog.gameID = g.gID
where u.userID = 1
group by u.userNickname;

-- 10. feladat
-- Melyik pozíciót töltik be a legtöbben?

select eProfession, count(*) as PositionCount
from Employee
group by eProfession
order by PositionCount desc
fetch first 1 rows only;

-- 11. feladat
-- Melyik játék szerepel a legtöbb kívánság listán és melyik játékot vásárolták meg a legtöbben?

select g.gName, count(*) AS Amount, 'Wishlisted'
from Games g
join WishList w on w.gameID = g.gID
group by g.gName
order by Amount desc
fetch first 1 rows only;

select g.gName, count(*) AS Amount, 'Owned'
from Games g
join UserOwnedGames o on o.gameID = g.gID
group by g.gName
order by Amount desc
fetch first 1 rows only;

-- 12. feladat
-- Melyik játéknál van a legkevesebb különbség az legtöbb játékos és a jelenlegi játékosok száma közt?

select gName, gMaxPlayerCount, gCurrentPlayerCount,
       ABS(gMaxPlayerCount - gCurrentPlayerCount) as PlayerDifference
from Games
order by PlayerDifference asc
fetch first 1 rows only;


-- 13. feladat
-- Melyik játékon hagyták a legtöbb pozitív értékelést?

select g.gName, count(*) as PositiveReviewCount
from Games g
join Reviews r on g.gID = r.gameID
where json_value(r.reviewData, '$.rating') >= 8
group by g.gName
order by PositiveReviewCount desc
fetch first 1 rows only;

-- 14. feladat
-- Melyik játékon dolgoztak a legtöbben?

select g.gName, count(e.eID) as TotalEmployees
from Games g
join Employee e on g.gID = e.eGameWorkedOn
group by g.gName
order by TotalEmployees desc
fetch first 1 rows only;

-- 15. feladat
-- Melyik a leghosszabb és legrövidebb felhasználónév?

select
    'Longest' as Category,
    userNickname as Username,
    LENGTH(userNickname) as Length
from PUser
where length(userNickname) = (select max(length(userNickname)) from PUser)

union

select
    'Shortest' as Category,
    userNickname as Username,
    LENGTH(userNickname) as Length
from PUser
where length(userNickname) = (select min(length(userNickname)) from PUser);

-- 16. feladat
-- Zsánerekre bontva, listázd ki a játékokat

select
    g.genName AS Genre,
    listagg(gm.gName, ', ') within group(order by gm.gName) as Games
from Genre g
left join Games gm on g.genID = gm.gGenre
group by g.genName
order by g.genName;

-- 17. feladat
-- Évekre bontva, listázd ki a játékokat

select
    extract(year from gReleaseDate) as ReleaseYear,
    listagg(gName, ', ') within group (order by gName) as Games
from Games
group by extract(year from gReleaseDate)
order by ReleaseYear;

-- 18. feladat
-- Melyik játékosnak van a legtöbb barátja és mennyi?

select
    u.userNickname,
    COUNT(f.friendID) as FriendCount
from Friends f
join PUser u on f.userID = u.userID
group by u.userNickname
order by FriendCount desc
fetch first 1 rows only;

-- 19. feladat
-- Ábrázold a jelenleg játékban lévő játékosok számát az eddigi legtöbb játékosok számához képest

select
    gName,
    gCurrentPlayerCount,
    gMaxPlayerCount,
    round((gCurrentPlayerCount / gMaxPlayerCount) * 100, 2) as PlayerPercentage,
    lpad('*', round((gCurrentPlayerCount / gMaxPlayerCount) * 10), '*') as StarRating
from
    Games
where
gMaxPlayerCount > 0;

-- 20. feladat
-- Válassz ki egy játékot és írj ki legalább maximum 5 hozzászólást

select
    g.gName as GameName,
    json_value(r.reviewData, '$.rating') || '/10 - ' || json_value(r.reviewData, '$.comment') as review
from
    Reviews r
join
    Games g ON r.gameID = g.gID
where
    r.gameID = 1
fetch first 5 rows only;

-- Explain Plans
-- 1.
explain plan for
select
    gName,
    gCurrentPlayerCount,
    gMaxPlayerCount,
    round((gCurrentPlayerCount / gMaxPlayerCount) * 100, 2) as PlayerPercentage,
    lpad('*', round((gCurrentPlayerCount / gMaxPlayerCount) * 10), '*') as StarRating
from
    Games
where
gMaxPlayerCount > 0;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY(format => 'ALL'));

-- 2.
explain plan for
select
    'Longest' as Category,
    userNickname as Username,
    LENGTH(userNickname) as Length
from PUser
where length(userNickname) = (select max(length(userNickname)) from PUser)

union

select
    'Shortest' as Category,
    userNickname as Username,
    LENGTH(userNickname) as Length
from PUser
where length(userNickname) = (select min(length(userNickname)) from PUser);

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY(format => 'ALL'));

-- 3.
explain plan for
select p.pName,listagg(d.dName, ', ') within group (order by d.dName) as "Developer(s)"
from Publisher p
left join json_table(
       p.pDevelopers,
       '$[*]' columns (devID int path'$.devID')
) jt on 1 = 1
left join Developer d on jt.devID = d.dID
group by p.pName;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY(format => 'ALL'));

-- 4.
explain plan for
with TrackDurations as (
    select JSON_VALUE(tracks, '$.length') as length
    from Soundtrack),
ConvertedDuration as (
    select sum(extract(minute from to_dsinterval('0 00:' || length)) * 60 + extract(second from to_dsinterval('0 00:' || length))) as total_seconds
    from TrackDurations),
FormattedDuration as(
    select
        floor(total_seconds / 86400) as days,
        floor(mod(total_seconds, 86400) / 3600) as hours,
        floor(mod(total_seconds, 3600) / 60) as minutes,
        mod(total_seconds, 60) as seconds
    from ConvertedDuration)

select * from FormattedDuration;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY(format => 'ALL'));

-- 5.
explain plan for
select p1.userNickname, p2.userNickname, g.gName, ABS(TRUNC(g.gReleaseDate - f.following_since)) as "Days since release and being friends" from Friends f
join PUser p1 on f.userID = p1.userID
join PUser p2 on f.friendID = p2.userID
join UserOwnedGames u1 on u1.userid = p1.userID
join UserOwnedGames u2 on u2.userid = p2.userID and u1.gameid = u2.gameid
join Games g on u1.gameid = g.gID
order by ABS(TRUNC(g.gReleaseDate - f.following_since)) asc
FETCH FIRST 1 ROWS ONLY;

SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY(format => 'ALL'));
