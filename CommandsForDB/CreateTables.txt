DROP TABLE UserOwnedGames cascade constraints;
DROP TABLE WishList cascade constraints;
DROP TABLE Friends cascade constraints;
DROP TABLE Soundtrack cascade constraints;
DROP TABLE Reviews cascade constraints;
DROP TABLE Games cascade constraints;
DROP TABLE Genre cascade constraints;
DROP TABLE Developer cascade constraints;
DROP TABLE Employee cascade constraints;
DROP TABLE Publisher cascade constraints;
DROP TABLE PUser cascade constraints;

CREATE TABLE PUser (
    userID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    userNickname VARCHAR2(25) UNIQUE,
    userAccountCreated DATE
);

CREATE TABLE Genre (
    genID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    genName VARCHAR2(10) UNIQUE
);

CREATE TABLE Developer (
    dID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    dName VARCHAR2(25) UNIQUE,
    dFoundingDate TIMESTAMP
);

CREATE TABLE Publisher (
    pID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    pName VARCHAR2(25) UNIQUE,
    pDevelopers CLOB CHECK (pDevelopers IS JSON)
);

CREATE TABLE Games (
    gID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    gName VARCHAR2(100),
    gGenre INTEGER,
    gDeveloper INTEGER,
    gPublisher INTEGER,
    gReleaseDate DATE,
    gHoursToComplete INTEGER,
    gRetailPrice INTEGER CHECK (gRetailPrice >= 0),
    FOREIGN KEY (gGenre) REFERENCES Genre(genID),
    FOREIGN KEY (gDeveloper) REFERENCES Developer(dID),
    FOREIGN KEY (gPublisher) REFERENCES Publisher(pID)
);

CREATE TABLE UserOwnedGames (
    userID INTEGER,
    gameID INTEGER,
    hasCompleted NUMBER(1) DEFAULT 0 CHECK (hasCompleted IN (0, 1)),
    timePlayed INTERVAL DAY TO SECOND DEFAULT INTERVAL '0 00:00:00' DAY TO SECOND,
    FOREIGN KEY (userID) REFERENCES PUser(userID),
    FOREIGN KEY (gameID) REFERENCES Games(gID)
);

CREATE TABLE WishList (
    userID INTEGER,
    gameID INTEGER,
    wishlist_date TIMESTAMP,
    FOREIGN KEY (userID) REFERENCES PUser(userID),
    FOREIGN KEY (gameID) REFERENCES Games(gID)
);

CREATE TABLE Friends (
    userID INTEGER,
    friendID INTEGER,
    following_since DATE,
    FOREIGN KEY (userID) REFERENCES PUser(userID),
    FOREIGN KEY (friendID) REFERENCES PUser(userID)
);

CREATE TABLE Employee (
    eID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    eDevCompID INTEGER,
    eName VARCHAR2(50),
    eGender NUMBER(1) CHECK (eGender IN (0, 1)), -- 0 = Male, 1 = Female
    eBirthDate DATE,
    eHireDate DATE,
    eProfession VARCHAR2(50),
    eDateSpentOnProject INTEGER CHECK (eDateSpentOnProject >= 0),
    FOREIGN KEY (eDevCompID) REFERENCES Developer(dID)
);

CREATE TABLE Soundtrack (
    gameID INTEGER,
    composer INTEGER,
    tracks CLOB CHECK (
        tracks IS JSON
        AND JSON_VALUE(tracks, '$.id' RETURNING NUMBER) IS NOT NULL
        AND JSON_VALUE(tracks, '$.title' RETURNING VARCHAR2(100)) IS NOT NULL
        AND JSON_VALUE(tracks, '$.length' RETURNING VARCHAR2(8)) LIKE '__:__'
    ),
    FOREIGN KEY (gameID) REFERENCES Games(gID),
    FOREIGN KEY (composer) REFERENCES Employee(eID)
);

CREATE TABLE Reviews (
    gameID INTEGER,
    reviewData CLOB CHECK (
        reviewData IS JSON
        AND JSON_VALUE(reviewData, '$.userID' RETURNING NUMBER) IS NOT NULL
        AND JSON_VALUE(reviewData, '$.rating' RETURNING NUMBER) BETWEEN 1 AND 10
        AND JSON_VALUE(reviewData, '$.comment' RETURNING VARCHAR2(500)) IS NOT NULL
    ),
    FOREIGN KEY (gameID) REFERENCES Games(gID)
);
